services:
  # My Super Service API
  my-super-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ghcr.io/YOUR_PATH_TO_IMAGE:latest
    container_name: my-super-service-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # EXAMPLE OF ENV VARIABLES - REPLACE WITH YOUR ACTUAL CONFIGURATION
      # THIS ONE IS FOR AN API SERVICE + POSTGRES + REDIS SETUP
      # API Server Configuration
      PORT: 3000
      HOST: 0.0.0.0
      API_KEY: ${API_KEY:-production-api-key-change-me}
      
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      CORS_CREDENTIALS: true
      CORS_METHODS: GET,POST,PUT,DELETE,OPTIONS
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_CONSOLE_ENABLED: true
      LOG_CONSOLE_COLORIZE: false
      LOG_FILE_ENABLED: false
      
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-my_super_service_db}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      REDIS_MAX_RETRIES: 3
      
      # Database Pool Configuration
      DB_POOL_MIN: 2
      DB_POOL_MAX: 20
      DB_POOL_IDLE_TIMEOUT: 30000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bun", "run", "--bun", "-e", "fetch('http://localhost:3000/api/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my-super-service-network
    deploy:
      resources:
        limits: # Set resource limits
          memory: 1G      # Keep small
          cpus: '0.5'     # Keep small
        reservations: # Ensure minimum resources
          memory: 512M
          cpus: '0.25'

  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:0.8.0-pg17-trixie
    container_name: my-super-service-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-my_super_service_db}
      # PostgreSQL optimizations for small instances
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - /mnt/data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-my_super_service_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my-super-service-network
    deploy:
      resources:
        limits:
          memory: 2G  # Increased for vector operations
          cpus: '1.0'  # Add CPU limits
        reservations:
          memory: 1G   # Increased reservation
          cpus: '0.5'  # Reserve CPU resources

  # Redis for caching
  redis:
    image: redis:latest
    container_name: my-super-service-redis
    restart: unless-stopped
    # Redis configuration:
    # --requirepass: Password ONLY authentication
    # --appendonly: Enable AOF (Append Only File) persistence for data durability
    # --maxmemory: Limit Redis memory usage to 256MB
    # --maxmemory-policy allkeys-lru: Evict least recently used keys when memory limit is reached
    # --save: Snapshot persistence - save after 1 change in 600s, 10 changes in 300s, or 10000 changes in 60s
    # --tcp-keepalive: Send TCP keepalive packets every 60 seconds to detect dead connections
    # --timeout: Close idle client connections after 300 seconds (5 minutes)
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD}"
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 600 1 300 10 60 10000
      --tcp-keepalive 60
      --timeout 300
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    volumes:
      - /mnt/data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my-super-service-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: my-super-service-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      my-super-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/my-super-service/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my-super-service-network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

networks:
  my-super-service-network:
    driver: bridge
