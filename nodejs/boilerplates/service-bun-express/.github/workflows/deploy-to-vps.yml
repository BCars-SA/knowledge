name: 2. Deploy to VPS (Hetzner)

on:
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Copy deployment files to Hetzner
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HETZNER_HOST }}
        port: ${{ secrets.HETZNER_SSH_PORT || 22 }}
        username: ${{ secrets.HETZNER_USER || 'admin' }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        source: "deploy/docker-compose-vps.yml,deploy/safe-replace-of-env-var.sh,deploy/nginx.conf,deploy/.env.production"
        target: "~/app/${{ github.event.repository.name }}/"
        strip_components: 1

    - name: Deploy to Hetzner
      uses: appleboy/ssh-action@v1.0.3
      env:
        API_KEY: ${{ secrets.API_KEY }}
        LLM_COMMON_API_KEY: ${{ secrets.LLM_COMMON_API_KEY }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
      with:
        host: ${{ secrets.HETZNER_HOST }}
        port: ${{ secrets.HETZNER_SSH_PORT || 22 }}
        username: ${{ secrets.HETZNER_USER || 'admin' }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        envs: API_KEY,POSTGRES_PASSWORD,REDIS_PASSWORD,CORS_ORIGIN,LLM_COMMON_API_KEY
        script: |
          set -euo pipefail

          # Ensure deploy directory exists and switch into it
          mkdir -p ~/app/${{ github.event.repository.name }}
          cd ~/app/${{ github.event.repository.name }}

          # Rename docker-compose file to expected name
          mv docker-compose-vps.yml docker-compose.yml
          
          # Create Dozzle users.yml file from GitHub secret
          cat > dozzle-users.yml << 'EOF'
          ${{ secrets.DOZZLE_USERS_YML }}
          EOF

          # Create GOOGLE_APPLICATION_CREDENTIALS.json file from GitHub secret
          cat > google-application-credentials.json << 'EOF'
          ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          EOF
          
          # Set proper permissions for the credentials file
          chmod 600 google-application-credentials.json

          # Create .env file from .env.production template by replacing placeholders with secrets
          cp .env.production .env

          # Make sure safe-replace-of-env-var.sh is executable
          chmod +x safe-replace-of-env-var.sh
          
          # Login and deploy
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Set ENV_FILE variable for docker compose
          # Docker compose will use it lately in env_file argument
          export ENV_FILE=".env"
          
          # Replace TO-SET-ON-DEPLOYMENT placeholders with actual secret values
          ./safe-replace-of-env-var.sh API_KEY "$API_KEY" .env
          ./safe-replace-of-env-var.sh LLM_COMMON_API_KEY "$LLM_COMMON_API_KEY" .env
          ./safe-replace-of-env-var.sh GOOGLE_APPLICATION_CREDENTIALS "google-application-credentials.json" .env
          ./safe-replace-of-env-var.sh POSTGRES_PASSWORD "$POSTGRES_PASSWORD" .env
          ./safe-replace-of-env-var.sh REDIS_PASSWORD "$REDIS_PASSWORD" .env
          ./safe-replace-of-env-var.sh CORS_ORIGIN "$CORS_ORIGIN" .env

          # Login and deploy
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Pull latest images
          docker compose pull
          
          # Stop and remove any containers not defined in current compose file
          docker compose down --remove-orphans
          
          # Start all services and wait for them to be healthy
          docker compose up -d --wait
          
          # Reload nginx configuration (in case it changed)
          docker compose exec nginx nginx -s reload || true
          
          # Show final status
          echo "All services are healthy!"
          docker compose ps
          
          # Cleanup unused images and containers
          docker image prune -f
          docker container prune -f

          # Remove .env file for security
          rm -f .env
          rm -f .env.production
          rm -f dozzle-users.yml